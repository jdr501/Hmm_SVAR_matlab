function [smth_prob,...
          loglikelihood,...
          sigma,...
          B_matrix,...
          lamdas,...
          params,llf, trans_prob] = em_algorith(data_mat,lags, beta, regimes,maxiter,tolerance,optimizer)
    
%EM_ALGORITH Summary of this function goes here
%   Detailed explanation goes here
[delta_yt,zt,resid,start_prob,trans_prob, sigma,x0] = initialize(data_mat, lags,beta, regimes);
    
[smth_prob,smth_joint_prob,loglikelihood, start_prob] = e_step(resid,...
                                                            sigma,...
                                                            trans_prob,...
                                                            start_prob, true);
 llf = loglikelihood;
    for i = 1: maxiter  
         %{
          wt = 0;
          if i ==1 
              x0=  (1-wt)*x0 + (wt)*x0 ; %.*(1+randn(size(x0)));
          else 
              x0 = (1-wt)*x0 + (wt)*x0_old ;  %.*(1+randn(size(x0)));
          end 
          
         
         [smth_prob,....
          smth_joint_prob, ....
          loglikelihood, start_prob, ...
          trans_prob, sigma,B_matrix,...
          lamdas, resid,...
          params,x0] = numerical_ini_guess(smth_prob,...
                                           smth_joint_prob, ...
                                           resid,delta_yt,... 
                                           zt,x0,llf(end), start_prob); 
         %}
         opt_fun2 = @(x) num_opt_w_grad(x,smth_prob, resid, 1e-6);

         if  opt_fun2(x0) == inf
             x0 = x0_old;
             disp('opt function initial value return inf')
             disp(opt_fun2(x0))
         end
         x0_old = x0;
          [trans_prob, sigma, B_matrix,...
           lamdas, resid, params,x0] = m_step(smth_prob,...
                                      smth_joint_prob,...
                                      resid,...
                                      delta_yt,zt,x0,2);

            [smth_prob,...
                smth_joint_prob,...
                loglikelihood, start_prob] = e_step(resid,...
                                        sigma,...
                                        trans_prob,...
                                        start_prob, true);
                               
           disp('----------------')           
           disp(trans_prob)  
           disp('----------------')
           disp('smooth prob ')
           disp(smth_prob)
           disp('----------------')
           disp('----------------')
           llf = [llf,loglikelihood]
           disp('----------------')
           disp('----------------')
           
        
            if i >= 2
                delta =  abs(llf(end) - llf(end-1))/ abs(llf(end-1))
                if delta<tolerance
                    break 
                end
            end 

    
    end 
end

